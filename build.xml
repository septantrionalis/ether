<?xml version="1.0" encoding="ISO-8859-1" ?>

<project name="ether" basedir="." default="main">
   <property name="version.num"    value="1.00"/>
   <property name="cfg.dir"        value="config"/>
   <property name="lib.dir"        value="lib"/>
   <property name="src.dir"        value="src"/>
   <property name="build.dir"      value="build"/>
   <property name="data.dir"       value="data"/>	
   <property name="area.dir"       value="area"/>  
   <property name="players.dir"    value="players"/>  
   <property name="classes.dir"    value="${build.dir}/classes"/>
   <property name="jar.dir"        value="${build.dir}/jar"/>
   <property name="dist.dir"        value="${build.dir}/dist"/>	
   <property name="main-class"     value="org.tdod.ether.Genesis"/>
	<property name="findbugs.dir"   value="tools/findbugs"/>
   <property name="checkstyle.dir" value="tools/checkstyle"/>	
   <property name="emma.dir"       value="tools/emma" />
   <property name="emma.enabled"   value="true"/>  
   <property name="emma.reports"   location="${emma.dir}/reports"/>  
   <property name="emma.coverage"  location="${emma.dir}/coverage" />  
   <property name="emma.instr"     location="${emma.dir}/instr" />  

   <property name="test.dir"          value="test"/>
   <property name="test.src.dir"      value="${test.dir}/src"/>
   <property name="test.classes.dir"  value="${test.dir}/build/classes"/>
	
	<path id="project.classpath">
	    <pathelement location="${lib.dir}/commons-logging.jar"/>
	    <pathelement location="${lib.dir}/log4j.jar"/>
       <pathelement location="${lib.dir}/pwts.jar"/>
       <pathelement location="${lib.dir}/xstream-1.3.1.jar"/>
       <pathelement location="${lib.dir}/slf4j-api-1.6.1.jar"/>
       <pathelement location="${lib.dir}/slf4j-simple-1.6.1.jar"/>
       <pathelement location="${lib.dir}/quartz-1.8.3.jar"/>
	</path>

	<path id="classpath">
           <fileset dir="${lib.dir}" includes="**/*.jar"/>
           <fileset dir="${jar.dir}" includes="**/*.jar"/>
        </path>

        <path id="ta-classpath">
           <pathelement location="${jar.dir}/ether.jar"/>
        </path>

   <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
     <classpath>
       <pathelement location="${findbugs.dir}/findbugs-ant.jar"/>
     </classpath>
   </taskdef>

   <taskdef resource="checkstyletask.properties" classpath="${checkstyle.dir}/checkstyle-all-5.1.jar"/>

   <target name="clean">
       <delete dir="${build.dir}"/>
   </target>

   <target name="compile">
       <mkdir dir="${classes.dir}"/>
       <mkdir dir="${jar.dir}"/>
       <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath"/>
   </target>

   <target name="jar" depends="compile">
       <buildnumber file="build.num"/>
       <tstamp>
         <format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
       </tstamp>
       <pathconvert property="mf.classpath" pathsep=" " refid="project.classpath">
         <map from="${basedir}/" to=""/>
  	    </pathconvert>

       <mkdir dir="${jar.dir}"/>
       <jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}">
           <manifest>
               <attribute name="Main-Class" value="${main-class}"/>
               <attribute name="Class-Path" value="${mf.classpath}"/>
               <attribute name="Implementation-Version" value="${version.num}-b${build.number} ${TODAY}"/> 
               <attribute name="Built-Date" value="${TODAY}"/>
           </manifest>
           <fileset dir="${cfg.dir}" includes="telnetd.properties"/>
           <fileset dir="${cfg.dir}" includes="log4j.properties"/>
       </jar>
   	
   	 <copy file="${jar.dir}/${ant.project.name}.jar" todir="${basedir}/"/>
   </target>

   <target name="run" depends="jar">
       <java fork="true" classname="${main-class}">
           <classpath>
               <path refid="classpath"/>
               <path location="${jar.dir}/${ant.project.name}.jar"/>
           </classpath>
         <jvmarg value="-DTaConfigFile=config/ta.properties"/>
       </java>
   </target>

   <target name="clean-build" depends="clean,jar"/>

   <target name="main" depends="clean, jar"/>

	<target name="deploy-live" depends="jar">
	  <property name="live.server" value="rkinney@tdod.org"/>
	  <property name="live.tomcat" value="~/applications/telearena/Telearena"/>
	  <property name="app.rsync" value="."/>
	  <exec executable="rsync">
	   <arg line="rsync -e ssh -Cavz ${app.rsync}/* ${live.server}:${live.tomcat}" />
	  </exec>
	</target>

	<target name="deploy" depends="deploy-live" />
	
   <target name="findbugs" depends="jar">
     <findbugs home="${findbugs.dir}"
              output="xml"
              outputFile="${findbugs.dir}/ta-fb.xml" >
       <auxClasspath>
           <fileset dir="${lib.dir}">
              <include name="*.jar"/>
           </fileset>
       </auxClasspath>
       <sourcePath path="${src.dir}" />
       <class location="${jar.dir}/ether.jar" />
     </findbugs>
   </target>

   <target name="checkstyle"
        description="Generates a report of code convention violations.">
     <checkstyle config="${checkstyle.dir}/sun_checks.xml" maxErrors="30000">
       <fileset dir="${src.dir}" includes="**/*.java"/>
       <formatter type="xml" toFile="${checkstyle.dir}/checkstyle_errors.xml"/>
     </checkstyle>
   </target>

   <target name="compile-test">
       <mkdir dir="${test.classes.dir}"/>
       <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" classpathref="classpath"/>
   </target>

   <taskdef resource="testngtasks" classpath="${lib.dir}/testng-5.13.1.jar"/>

   <path id="test-classpath">
      <pathelement location="${test.classes.dir}" />
      <pathelement location="${emma.instr}" />
      <path refid="emma.lib" />
   </path>

   <target name="test-suite" depends="compile-test,jar,instr">
     <echo>Running Suite from file: ${suite}</echo>
     
     <mkdir dir="${emma.reports}" />
     
     <testng classpathref="test-classpath"
              outputDir="test-output">
              <xmlfileset file="test/all-suite.xml"/>
           <classpath>
              <path location="ether.jar"/>
           </classpath>
           <jvmarg value="-Demma.coverage.out.file=${emma.coverage}/coverage.emma" />  
           <jvmarg value="-Demma.coverage.out.merge=false" />  
     </testng>
     
     <emma enabled="${emma.enabled}" >
        <report sourcepath="${src.dir}" >
           <fileset dir="${emma.coverage}">
              <include name="*.emma" />
           </fileset>

           <txt outfile="${emma.coverage}/coverage.txt"/>
           <xml outfile="${emma.coverage}/coverage.xml"/>
           <html outfile="${emma.coverage}/coverage.html"/>
        </report>
     </emma>
     
   </target>

   <path id="emma.lib" >
      <pathelement location="${emma.dir}/emma.jar" />
      <pathelement location="${emma.dir}/emma_ant.jar" />
   </path>

   <taskdef resource="emma_ant.properties" classpathref="emma.lib" />

   <target name="report.html" >  
      <taskdef resource="emma_ant.properties" classpathref="emma.lib"/>  
         <emma>  
            <report sourcepath="${src.dir}" >  
               <fileset dir="${emma.coverage}" >  
                  <include name="*.emma" />  
               </fileset>  
               <html outfile="${emma.coverage}/coverage.html" />  
            </report>  
         </emma>  
   </target>

   <target name="instr" depends="jar" if="emma.enabled" > 
      <emma enabled="${emma.enabled}" > 
         <instr instrpathref="ta-classpath"  
              destdir="${emma.instr}"  
              metadatafile="${emma.coverage}/metadata.emma"  
              merge="true"/>  
      </emma>  
   </target>
       
	<target name="dist">
      <buildnumber file="build.num"/>
      <mkdir dir="${dist.dir}"/>
      <copy file="${jar.dir}/${ant.project.name}.jar" todir="${dist.dir}/"/>
      <copy file="build.num" todir="${dist.dir}/"/>
      <copy file="README.txt" todir="${dist.dir}/"/>
      <copy file="run.sh" todir="${dist.dir}/"/>
      <copy file="run.bat" todir="${dist.dir}/"/>
				
      <mkdir dir="${dist.dir}/${lib.dir}"/>     
	   <copy todir="${dist.dir}/${lib.dir}">
	      <fileset dir="${lib.dir}"/>
	   	<globmapper from="*" to="*"/>
	   </copy>		

      <mkdir dir="${dist.dir}/${cfg.dir}"/>     
      <copy todir="${dist.dir}/${cfg.dir}">
         <fileset dir="${cfg.dir}"/>
         <globmapper from="*" to="*"/>
      </copy>     

      <mkdir dir="${dist.dir}/${data.dir}"/>
      <copy file="${data.dir}/classes.dat" todir="${dist.dir}/${data.dir}"/>
      <copy file="${data.dir}/commands.dat" todir="${dist.dir}/${data.dir}"/>
      <copy file="${data.dir}/message.properties" todir="${dist.dir}/${data.dir}"/>
      <copy file="${data.dir}/mob_spec_ability.dat" todir="${dist.dir}/${data.dir}"/>
      <copy file="${data.dir}/motd.txt" todir="${dist.dir}/${data.dir}"/>
      <copy file="${data.dir}/races.dat" todir="${dist.dir}/${data.dir}"/>
      <copy file="${data.dir}/spell_command.dat" todir="${dist.dir}/${data.dir}"/>
      <copy file="${data.dir}/stat_range.dat" todir="${dist.dir}/${data.dir}"/>
		
      <mkdir dir="${dist.dir}/${area.dir}"/>     
      <copy file="${area.dir}/room_desc.lst" todir="${dist.dir}/${area.dir}"/>
      <copy file="${area.dir}/area.lst" todir="${dist.dir}/${area.dir}"/>

      <mkdir dir="${dist.dir}/${players.dir}"/>     
		
		<zip destfile="${build.dir}/ether${version.num}b${build.number}.zip">
		    <zipfileset dir="${dist.dir}" prefix="ether"/>
      </zip>
	</target>
	
   <target name="dist-complete" depends="dist">
      <copy todir="${dist.dir}/${area.dir}">
         <fileset dir="${area.dir}"/>
         <globmapper from="*" to="*"/>
      </copy>
   	
      <copy todir="${dist.dir}/${data.dir}">
         <fileset dir="${data.dir}"/>
         <globmapper from="*" to="*"/>
      </copy>   	
   	
      <zip destfile="${build.dir}/ether_complete${version.num}b${build.number}.zip">
          <zipfileset dir="${dist.dir}" prefix="ether"/>
      </zip>
   	
   </target>
	
</project>
